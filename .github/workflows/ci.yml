name: CI/CD

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Please enter the reason for the manual build:'
        required: true
        default: 'Build failed during GitHub error...'
  push:
    branches:
      - main
  pull_request:
    branches:
      - main


jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 18.x ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::new-output name=dir::$(yarn cache dir)"

      - name: Cache dependencies
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: |
          echo "YARN CACHE CHANGED"
          yarn --prefer-offline
        if: |
          steps.cache-yarn-cache.outputs.cache-hit != 'true' ||
          steps.cache-node-modules.outputs.cache-hit != 'true'

      - name: Validate code
        run: yarn validate

      - name: 'Create env file'
        run: |
          touch .env
          echo API_URL=${{ vars.API_URL }} >> .env
          echo GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} >> .env
          cat .env

      - name: Build
        run: yarn build

  test:
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        os: [ ubuntu-latest ]
        node-version: [ 18.x ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: |
          echo "YARN CACHE CHANGED"
          yarn --prefer-offline
        if: |
          steps.cache-yarn-cache.outputs.cache-hit != 'true' ||
          steps.cache-node-modules.outputs.cache-hit != 'true'

      - name: Run tests
        run: yarn test


  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 'Create env file'
        run: |
          touch .env
          echo API_URL=${{ vars.API_URL }} >> .env
          cat .env

      - name: Build image
        run: docker build . --file Dockerfile --tag q-posts --label "runnumber=${GITHUB_RUN_ID}"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image to GitHub Container
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/q-posts
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag q-posts $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

      - name: Install dependencies
        run: |
          echo "YARN CACHE CHANGED"
          yarn --prefer-offline
        if: |
          steps.cache-yarn-cache.outputs.cache-hit != 'true' ||
          steps.cache-node-modules.outputs.cache-hit != 'true'

      - name: Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
